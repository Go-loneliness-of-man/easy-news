
1、尽量少用动态组件做路由，之前在公司开发有次动态组件玩脱了，导致后期维护越来越难只能重构，所以日常开发能用路由（vue-router）就用路由，别随便玩动态组件。

2、tinymce 插入图片时会实时上传图片到服务器，然后拿到 url 再渲染图片到编辑器里，这容易造成文件冗余，比如我编辑时不一定会提交，或者同一篇文章我编辑好几次，每次插入图片都会造成冗余。
解决：借鉴 git 暂存区的方式，后台分两个文件夹放图片，一个暂存区 temp，一个图片区 img，所有编辑时产生的图片都放在 temp，提交时再移动到 img，这样所有冗余的文件都在 temp 内，搞个定时任务清理就行了，
如果怕清理时影响正在编辑的内容，可以根据时间来判断，只删除 temp 下某个时间前上传的文件，比如只删除三小时以前的文件。
为避免临时文件名重复，命名可以采用 时间戳_随机字符串的形式。

3、axios 发请求 php 接收不到 put、post 传输的数据，这是因为 axios 发送请求头和原生 php 默认配置不同，只改前端的解决方法是，在 axios.create 时加入参数：

headers: { 'Content-type': 'application/x-www-form-urlencoded' },
transformRequest: [function (data) { // 转换数据适应 form 格式
	data = Qs.stringify(data);
	return data;
}],

这样后台 php 就可以正常收到参数了。






实现流程：

这次 xmind 内的设计、技术栈在实现前就基本都全部敲定了，实现时是按这个顺序来的：

建数据库 -> 写后台管理前端界面 -> 写后台 api -> 写用户前端界面 -> 完整测试

建数据库没啥好说的，按 xmind 设计好的写 sql 后备份成 sql 文件就好了，后台管理界面和后台 api 是其实算是相辅相成的，总的顺序上前端靠前一些，实现时是一个一个模块来的，最先写的各种新增模块，之后再依次写获取、删除、修改，等后台
管理基本没啥问题了，再写用户的前端界面，后台管理前端和用户前端是共用一套 api 的，起初我还想要不要分个模块，但合起来其实也没多少 api，便懒得分了，等后续更新项目复杂度上来，我觉得有必要时再把后台管理和用户前端的 api 分开也不
迟。
